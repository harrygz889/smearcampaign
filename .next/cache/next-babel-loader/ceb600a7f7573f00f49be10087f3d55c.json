{"ast":null,"code":"import gql from 'graphql-tag';\nimport { PAGINATION_QUERY } from '../components/Pagination';\nexport default function paginationField() {\n  return {\n    keyArgs: false,\n    // tells apollo that we are taking care of everything\n    read: function read() {\n      var _data$_allProductsMet;\n\n      var existing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      var _ref = arguments.length > 1 ? arguments[1] : undefined,\n          args = _ref.args,\n          cache = _ref.cache;\n\n      var skip = args.skip,\n          first = args.first; // read the number of items on the page from cache\n\n      var data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      var count = data === null || data === void 0 ? void 0 : (_data$_allProductsMet = data._allProductsMeta) === null || _data$_allProductsMet === void 0 ? void 0 : _data$_allProductsMet.count;\n      var page = skip / first + 1;\n      var pages = Math.ceil(count / first); // check if we have existing items\n\n      var items = existing.slice(skip, skip + first).filter(function (x) {\n        return x;\n      });\n\n      if (items.length !== first) {\n        return false;\n      } // if there are items, return them from the cache\n\n\n      if (items.length) {\n        console.log(\"\\\"There are \".concat(items.length, \" items in the cache. Sending them to Apollo!\"));\n        return items;\n      } // fallback to fetching them from the network\n\n\n      return false;\n    },\n    merge: function merge(existing, incoming, _ref2) {\n      var args = _ref2.args;\n      var first = args.first,\n          skip = args.skip;\n      var merged = existing ? existing.slice(0) : []; // make sure to add space for skipped elements, so that pagination works --\n      // i.e. if someone goes straight to page 4, the first 3 pages of elements\n      // are not loaded and must be accounted for\n\n      for (var i = skip; i < skip + incoming.length; ++i) {\n        merged[i] = incoming[i - skip];\n      }\n\n      console.log(merged); // return merged items from cache\n\n      return merged;\n    }\n  };\n}","map":{"version":3,"sources":["/Users/WorkAccount/sick-fits/frontend/lib/paginationField.js"],"names":["gql","PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","skip","first","data","readQuery","query","count","_allProductsMeta","page","pages","Math","ceil","items","slice","filter","x","length","console","log","merge","incoming","merged","i"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AAEA,eAAe,SAASC,eAAT,GAA2B;AACxC,SAAO;AACLC,IAAAA,OAAO,EAAE,KADJ;AACW;AAChBC,IAAAA,IAFK,kBAEgC;AAAA;;AAAA,UAAhCC,QAAgC,uEAArB,EAAqB;;AAAA;AAAA,UAAfC,IAAe,QAAfA,IAAe;AAAA,UAATC,KAAS,QAATA,KAAS;;AAAA,UAC3BC,IAD2B,GACXF,IADW,CAC3BE,IAD2B;AAAA,UACrBC,KADqB,GACXH,IADW,CACrBG,KADqB,EAGnC;;AACA,UAAMC,IAAI,GAAGH,KAAK,CAACI,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEX;AAAT,OAAhB,CAAb;AACA,UAAMY,KAAK,GAAGH,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEI,gBAAT,0DAAG,sBAAwBD,KAAtC;AACA,UAAME,IAAI,GAAGP,IAAI,GAAGC,KAAP,GAAe,CAA5B;AACA,UAAMO,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGJ,KAAlB,CAAd,CAPmC,CASnC;;AACA,UAAMU,KAAK,GAAGd,QAAQ,CAACe,KAAT,CAAeZ,IAAf,EAAqBA,IAAI,GAAGC,KAA5B,EAAmCY,MAAnC,CAA0C,UAACC,CAAD;AAAA,eAAOA,CAAP;AAAA,OAA1C,CAAd;;AACA,UAAIH,KAAK,CAACI,MAAN,KAAiBd,KAArB,EAA4B;AAC1B,eAAO,KAAP;AACD,OAbkC,CAenC;;;AACA,UAAIU,KAAK,CAACI,MAAV,EAAkB;AAChBC,QAAAA,OAAO,CAACC,GAAR,uBACgBN,KAAK,CAACI,MADtB;AAGA,eAAOJ,KAAP;AACD,OArBkC,CAuBnC;;;AACA,aAAO,KAAP;AACD,KA3BI;AA4BLO,IAAAA,KA5BK,iBA4BCrB,QA5BD,EA4BWsB,QA5BX,SA4B+B;AAAA,UAARrB,IAAQ,SAARA,IAAQ;AAAA,UAC1BG,KAD0B,GACVH,IADU,CAC1BG,KAD0B;AAAA,UACnBD,IADmB,GACVF,IADU,CACnBE,IADmB;AAElC,UAAMoB,MAAM,GAAGvB,QAAQ,GAAGA,QAAQ,CAACe,KAAT,CAAe,CAAf,CAAH,GAAuB,EAA9C,CAFkC,CAIlC;AACA;AACA;;AACA,WAAK,IAAIS,CAAC,GAAGrB,IAAb,EAAmBqB,CAAC,GAAGrB,IAAI,GAAGmB,QAAQ,CAACJ,MAAvC,EAA+C,EAAEM,CAAjD,EAAoD;AAClDD,QAAAA,MAAM,CAACC,CAAD,CAAN,GAAYF,QAAQ,CAACE,CAAC,GAAGrB,IAAL,CAApB;AACD;;AACDgB,MAAAA,OAAO,CAACC,GAAR,CAAYG,MAAZ,EAVkC,CAWlC;;AACA,aAAOA,MAAP;AACD;AAzCI,GAAP;AA2CD","sourcesContent":["import gql from 'graphql-tag';\nimport { PAGINATION_QUERY } from '../components/Pagination';\n\nexport default function paginationField() {\n  return {\n    keyArgs: false, // tells apollo that we are taking care of everything\n    read(existing = [], { args, cache }) {\n      const { skip, first } = args;\n\n      // read the number of items on the page from cache\n      const data = cache.readQuery({ query: PAGINATION_QUERY });\n      const count = data?._allProductsMeta?.count;\n      const page = skip / first + 1;\n      const pages = Math.ceil(count / first);\n\n      // check if we have existing items\n      const items = existing.slice(skip, skip + first).filter((x) => x);\n      if (items.length !== first) {\n        return false;\n      }\n\n      // if there are items, return them from the cache\n      if (items.length) {\n        console.log(\n          `\"There are ${items.length} items in the cache. Sending them to Apollo!`\n        );\n        return items;\n      }\n\n      // fallback to fetching them from the network\n      return false;\n    },\n    merge(existing, incoming, { args }) {\n      const { first, skip } = args;\n      const merged = existing ? existing.slice(0) : [];\n\n      // make sure to add space for skipped elements, so that pagination works --\n      // i.e. if someone goes straight to page 4, the first 3 pages of elements\n      // are not loaded and must be accounted for\n      for (let i = skip; i < skip + incoming.length; ++i) {\n        merged[i] = incoming[i - skip];\n      }\n      console.log(merged);\n      // return merged items from cache\n      return merged;\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}