{"ast":null,"code":"import gql from 'graphql-tag';\nimport { PAGINATION_QUERY } from '../components/Pagination';\nexport default function paginationField() {\n  return {\n    keyArgs: false,\n\n    // tells apollo that we are taking care of everything\n    read(existing = [], {\n      args,\n      cache\n    }) {\n      var _data$_allProductsMet;\n\n      const {\n        skip,\n        first\n      } = args; // read the number of items on the page from cache\n\n      const data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      const count = data === null || data === void 0 ? void 0 : (_data$_allProductsMet = data._allProductsMeta) === null || _data$_allProductsMet === void 0 ? void 0 : _data$_allProductsMet.count;\n      const page = skip / first + 1;\n      const pages = Math.ceil(count / first); // check if we have existing items\n\n      const items = existing.slice(skip, skip + first).filter(x => x);\n\n      if (items.length !== first) {\n        return false;\n      } // if there are items, return them from the cache\n\n\n      if (items.length) {\n        console.log(`\"There are ${items.length} items in the cache. Sending them to Apollo!`);\n        return items;\n      } // fallback to fetching them from the network\n\n\n      return false;\n    },\n\n    merge(existing, incoming, {\n      args\n    }) {\n      const {\n        first,\n        skip\n      } = args;\n      const merged = existing ? existing.slice(0) : []; // make sure to add space for skipped elements, so that pagination works --\n      // i.e. if someone goes straight to page 4, the first 3 pages of elements\n      // are not loaded and must be accounted for\n\n      for (let i = skip; i < skip + incoming.length; ++i) {\n        merged[i] = incoming[i - skip];\n      }\n\n      console.log(merged); // return merged items from cache\n\n      return merged;\n    }\n\n  };\n}","map":{"version":3,"sources":["/Users/WorkAccount/sick-fits/frontend/lib/paginationField.js"],"names":["gql","PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","skip","first","data","readQuery","query","count","_allProductsMeta","page","pages","Math","ceil","items","slice","filter","x","length","console","log","merge","incoming","merged","i"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AAEA,eAAe,SAASC,eAAT,GAA2B;AACxC,SAAO;AACLC,IAAAA,OAAO,EAAE,KADJ;;AACW;AAChBC,IAAAA,IAAI,CAACC,QAAQ,GAAG,EAAZ,EAAgB;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAhB,EAAiC;AAAA;;AACnC,YAAM;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBH,IAAxB,CADmC,CAGnC;;AACA,YAAMI,IAAI,GAAGH,KAAK,CAACI,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEX;AAAT,OAAhB,CAAb;AACA,YAAMY,KAAK,GAAGH,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEI,gBAAT,0DAAG,sBAAwBD,KAAtC;AACA,YAAME,IAAI,GAAGP,IAAI,GAAGC,KAAP,GAAe,CAA5B;AACA,YAAMO,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGJ,KAAlB,CAAd,CAPmC,CASnC;;AACA,YAAMU,KAAK,GAAGd,QAAQ,CAACe,KAAT,CAAeZ,IAAf,EAAqBA,IAAI,GAAGC,KAA5B,EAAmCY,MAAnC,CAA2CC,CAAD,IAAOA,CAAjD,CAAd;;AACA,UAAIH,KAAK,CAACI,MAAN,KAAiBd,KAArB,EAA4B;AAC1B,eAAO,KAAP;AACD,OAbkC,CAenC;;;AACA,UAAIU,KAAK,CAACI,MAAV,EAAkB;AAChBC,QAAAA,OAAO,CAACC,GAAR,CACG,cAAaN,KAAK,CAACI,MAAO,8CAD7B;AAGA,eAAOJ,KAAP;AACD,OArBkC,CAuBnC;;;AACA,aAAO,KAAP;AACD,KA3BI;;AA4BLO,IAAAA,KAAK,CAACrB,QAAD,EAAWsB,QAAX,EAAqB;AAAErB,MAAAA;AAAF,KAArB,EAA+B;AAClC,YAAM;AAAEG,QAAAA,KAAF;AAASD,QAAAA;AAAT,UAAkBF,IAAxB;AACA,YAAMsB,MAAM,GAAGvB,QAAQ,GAAGA,QAAQ,CAACe,KAAT,CAAe,CAAf,CAAH,GAAuB,EAA9C,CAFkC,CAIlC;AACA;AACA;;AACA,WAAK,IAAIS,CAAC,GAAGrB,IAAb,EAAmBqB,CAAC,GAAGrB,IAAI,GAAGmB,QAAQ,CAACJ,MAAvC,EAA+C,EAAEM,CAAjD,EAAoD;AAClDD,QAAAA,MAAM,CAACC,CAAD,CAAN,GAAYF,QAAQ,CAACE,CAAC,GAAGrB,IAAL,CAApB;AACD;;AACDgB,MAAAA,OAAO,CAACC,GAAR,CAAYG,MAAZ,EAVkC,CAWlC;;AACA,aAAOA,MAAP;AACD;;AAzCI,GAAP;AA2CD","sourcesContent":["import gql from 'graphql-tag';\nimport { PAGINATION_QUERY } from '../components/Pagination';\n\nexport default function paginationField() {\n  return {\n    keyArgs: false, // tells apollo that we are taking care of everything\n    read(existing = [], { args, cache }) {\n      const { skip, first } = args;\n\n      // read the number of items on the page from cache\n      const data = cache.readQuery({ query: PAGINATION_QUERY });\n      const count = data?._allProductsMeta?.count;\n      const page = skip / first + 1;\n      const pages = Math.ceil(count / first);\n\n      // check if we have existing items\n      const items = existing.slice(skip, skip + first).filter((x) => x);\n      if (items.length !== first) {\n        return false;\n      }\n\n      // if there are items, return them from the cache\n      if (items.length) {\n        console.log(\n          `\"There are ${items.length} items in the cache. Sending them to Apollo!`\n        );\n        return items;\n      }\n\n      // fallback to fetching them from the network\n      return false;\n    },\n    merge(existing, incoming, { args }) {\n      const { first, skip } = args;\n      const merged = existing ? existing.slice(0) : [];\n\n      // make sure to add space for skipped elements, so that pagination works --\n      // i.e. if someone goes straight to page 4, the first 3 pages of elements\n      // are not loaded and must be accounted for\n      for (let i = skip; i < skip + incoming.length; ++i) {\n        merged[i] = incoming[i - skip];\n      }\n      console.log(merged);\n      // return merged items from cache\n      return merged;\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}